\hypertarget{functions_8cpp}{}\doxysection{functions.\+cpp File Reference}
\label{functions_8cpp}\index{functions.cpp@{functions.cpp}}
{\ttfamily \#include $<$iostream$>$}\newline
{\ttfamily \#include $<$fstream$>$}\newline
{\ttfamily \#include $<$sstream$>$}\newline
{\ttfamily \#include $<$string.\+h$>$}\newline
{\ttfamily \#include $<$algorithm$>$}\newline
{\ttfamily \#include \char`\"{}functions.\+h\char`\"{}}\newline
Include dependency graph for functions.\+cpp\+:
% FIG 0
\doxysubsection*{Macros}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{functions_8cpp_a1614f028c1fef258edfb81fb963609cb}\label{functions_8cpp_a1614f028c1fef258edfb81fb963609cb}} 
\#define {\bfseries debug}(x)~std\+::cerr $<$$<$ \char`\"{}(\char`\"{} $<$$<$ \+\_\+\+\_\+\+L\+I\+N\+E\+\_\+\+\_\+ $<$$<$ \char`\"{}) \char`\"{} $<$$<$ \#x $<$$<$ \char`\"{} == \char`\"{} $<$$<$ (x) $<$$<$ std\+::endl
\end{DoxyCompactItemize}
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
std\+::string \mbox{\hyperlink{functions_8cpp_a1a32c4d3bd87256731e67936766c65ca}{trim}} (const std\+::string \&s)
\begin{DoxyCompactList}\small\item\em Triming string line. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{functions_8cpp_a44a27649118a8de819c7cb1bd541426a}{add\+Edge}} (\mbox{\hyperlink{structedge}{edge}} $\ast$\&main\+Head, int x1, int x2, double weight)
\begin{DoxyCompactList}\small\item\em Adds edge to verticles main structure Head. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structedge}{edge}} $\ast$ \mbox{\hyperlink{functions_8cpp_a46108a37c5452f6ac0d04da12bb6dc86}{lightest\+Edge}} (\mbox{\hyperlink{structedge}{edge}} $\ast$main\+Head)
\begin{DoxyCompactList}\small\item\em Search for the lightest of all edges. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{functions_8cpp_a8b360d52b9ff6a89d766e67e6097e4bf}{remove\+Edge}} (\mbox{\hyperlink{structedge}{edge}} $\ast$\&main\+Head, \mbox{\hyperlink{structedge}{edge}} $\ast$sng\+Edge)
\begin{DoxyCompactList}\small\item\em Removes pointed edge from the list. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{functions_8cpp_ab789a3fb36be88abfd222947a912aaee}{get\+Tree}} (\mbox{\hyperlink{structverticle}{verticle}} $\ast$\&main\+Head, int x)
\begin{DoxyCompactList}\small\item\em Retrieves tree identifier of a verticle. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{functions_8cpp_a18aa5a7184d68f764c45fff18aa03274}{bound}} (\mbox{\hyperlink{structverticle}{verticle}} $\ast$\&main\+Head, int x, int y)
\begin{DoxyCompactList}\small\item\em Merges two trees by changing tree identifiers of verticles. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{functions_8cpp_a3faba60f90308170a546d0648d3f0143}{add\+Verticle}} (\mbox{\hyperlink{structverticle}{verticle}} $\ast$\&verticle\+Head, int x)
\begin{DoxyCompactList}\small\item\em Adds verticle to the list. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{functions_8cpp_aaab31a8b3fac3d46522fbd54da1e1f25}{delete\+Edges}} (\mbox{\hyperlink{structedge}{edge}} $\ast$\&edges\+Head)
\item 
void \mbox{\hyperlink{functions_8cpp_a0a0313fc373cefa2adb1ebf151855c2c}{delete\+Verticles}} (\mbox{\hyperlink{structverticle}{verticle}} $\ast$\&verticles\+Head)
\item 
void \mbox{\hyperlink{functions_8cpp_a6506043cac805db79421515ecaa918df}{erase\+Charsfrom\+Middle}} (std\+::string \&str, char chars\+To\+Remove)
\end{DoxyCompactItemize}


\doxysubsection{Function Documentation}
\mbox{\Hypertarget{functions_8cpp_a44a27649118a8de819c7cb1bd541426a}\label{functions_8cpp_a44a27649118a8de819c7cb1bd541426a}} 
\index{functions.cpp@{functions.cpp}!addEdge@{addEdge}}
\index{addEdge@{addEdge}!functions.cpp@{functions.cpp}}
\doxysubsubsection{\texorpdfstring{addEdge()}{addEdge()}}
{\footnotesize\ttfamily void add\+Edge (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structedge}{edge}} $\ast$\&}]{main\+Head,  }\item[{int}]{x1,  }\item[{int}]{x2,  }\item[{double}]{weight }\end{DoxyParamCaption})}



Adds edge to verticles main structure Head. 

Adding edges


\begin{DoxyParams}{Parameters}
{\em main\+Head} & verticle main head \\
\hline
{\em x1} & first verticle of edge \\
\hline
{\em x2} & seccond verticle of edge \\
\hline
{\em weight} & weight of edge \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{functions_8cpp_a3faba60f90308170a546d0648d3f0143}\label{functions_8cpp_a3faba60f90308170a546d0648d3f0143}} 
\index{functions.cpp@{functions.cpp}!addVerticle@{addVerticle}}
\index{addVerticle@{addVerticle}!functions.cpp@{functions.cpp}}
\doxysubsubsection{\texorpdfstring{addVerticle()}{addVerticle()}}
{\footnotesize\ttfamily void add\+Verticle (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structverticle}{verticle}} $\ast$\&}]{verticle\+Head,  }\item[{int}]{x }\end{DoxyParamCaption})}



Adds verticle to the list. 

Adding verticle 
\begin{DoxyParams}{Parameters}
{\em verticle\+Head} & begining of the list \\
\hline
{\em x} & Verticle to add \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{functions_8cpp_a18aa5a7184d68f764c45fff18aa03274}\label{functions_8cpp_a18aa5a7184d68f764c45fff18aa03274}} 
\index{functions.cpp@{functions.cpp}!bound@{bound}}
\index{bound@{bound}!functions.cpp@{functions.cpp}}
\doxysubsubsection{\texorpdfstring{bound()}{bound()}}
{\footnotesize\ttfamily void bound (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structverticle}{verticle}} $\ast$\&}]{main\+Head,  }\item[{int}]{x,  }\item[{int}]{y }\end{DoxyParamCaption})}



Merges two trees by changing tree identifiers of verticles. 

Bounding trees 
\begin{DoxyParams}{Parameters}
{\em main\+Head} & Begining of the list \\
\hline
{\em x} & index of first verticle \\
\hline
{\em y} & index of the second verticle \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{functions_8cpp_aaab31a8b3fac3d46522fbd54da1e1f25}\label{functions_8cpp_aaab31a8b3fac3d46522fbd54da1e1f25}} 
\index{functions.cpp@{functions.cpp}!deleteEdges@{deleteEdges}}
\index{deleteEdges@{deleteEdges}!functions.cpp@{functions.cpp}}
\doxysubsubsection{\texorpdfstring{deleteEdges()}{deleteEdges()}}
{\footnotesize\ttfamily void delete\+Edges (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structedge}{edge}} $\ast$\&}]{edges\+Head }\end{DoxyParamCaption})}

Deletes whole list of edges 
\begin{DoxyParams}{Parameters}
{\em edges\+Head} & Begining of the list \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{functions_8cpp_a0a0313fc373cefa2adb1ebf151855c2c}\label{functions_8cpp_a0a0313fc373cefa2adb1ebf151855c2c}} 
\index{functions.cpp@{functions.cpp}!deleteVerticles@{deleteVerticles}}
\index{deleteVerticles@{deleteVerticles}!functions.cpp@{functions.cpp}}
\doxysubsubsection{\texorpdfstring{deleteVerticles()}{deleteVerticles()}}
{\footnotesize\ttfamily void delete\+Verticles (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structverticle}{verticle}} $\ast$\&}]{verticles\+Head }\end{DoxyParamCaption})}

Deletes whole list of verticles 
\begin{DoxyParams}{Parameters}
{\em verticles\+Head} & Begining of the list \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{functions_8cpp_a6506043cac805db79421515ecaa918df}\label{functions_8cpp_a6506043cac805db79421515ecaa918df}} 
\index{functions.cpp@{functions.cpp}!eraseCharsfromMiddle@{eraseCharsfromMiddle}}
\index{eraseCharsfromMiddle@{eraseCharsfromMiddle}!functions.cpp@{functions.cpp}}
\doxysubsubsection{\texorpdfstring{eraseCharsfromMiddle()}{eraseCharsfromMiddle()}}
{\footnotesize\ttfamily void erase\+Charsfrom\+Middle (\begin{DoxyParamCaption}\item[{std\+::string \&}]{str,  }\item[{char}]{chars\+To\+Remove }\end{DoxyParamCaption})}

Erases specified characters from the string 
\begin{DoxyParams}{Parameters}
{\em str} & string with characters to remove \\
\hline
{\em chars\+To\+Remove} & character to remove from the string \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{functions_8cpp_ab789a3fb36be88abfd222947a912aaee}\label{functions_8cpp_ab789a3fb36be88abfd222947a912aaee}} 
\index{functions.cpp@{functions.cpp}!getTree@{getTree}}
\index{getTree@{getTree}!functions.cpp@{functions.cpp}}
\doxysubsubsection{\texorpdfstring{getTree()}{getTree()}}
{\footnotesize\ttfamily int get\+Tree (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structverticle}{verticle}} $\ast$\&}]{head,  }\item[{int}]{x }\end{DoxyParamCaption})}



Retrieves tree identifier of a verticle. 

Retrieving tree 
\begin{DoxyParams}{Parameters}
{\em head} & Begining of the list \\
\hline
{\em x} & Index of verticle \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
int Identifier of the tree 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8cpp_a46108a37c5452f6ac0d04da12bb6dc86}\label{functions_8cpp_a46108a37c5452f6ac0d04da12bb6dc86}} 
\index{functions.cpp@{functions.cpp}!lightestEdge@{lightestEdge}}
\index{lightestEdge@{lightestEdge}!functions.cpp@{functions.cpp}}
\doxysubsubsection{\texorpdfstring{lightestEdge()}{lightestEdge()}}
{\footnotesize\ttfamily \mbox{\hyperlink{structedge}{edge}}$\ast$ lightest\+Edge (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structedge}{edge}} $\ast$}]{main\+Head }\end{DoxyParamCaption})}



Search for the lightest of all edges. 

The lightest of edges


\begin{DoxyParams}{Parameters}
{\em main\+Head} & begining of the list \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
edge$\ast$ pointer to lightest edge 
\end{DoxyReturn}
\mbox{\Hypertarget{functions_8cpp_a8b360d52b9ff6a89d766e67e6097e4bf}\label{functions_8cpp_a8b360d52b9ff6a89d766e67e6097e4bf}} 
\index{functions.cpp@{functions.cpp}!removeEdge@{removeEdge}}
\index{removeEdge@{removeEdge}!functions.cpp@{functions.cpp}}
\doxysubsubsection{\texorpdfstring{removeEdge()}{removeEdge()}}
{\footnotesize\ttfamily bool remove\+Edge (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structedge}{edge}} $\ast$\&}]{main\+Head,  }\item[{\mbox{\hyperlink{structedge}{edge}} $\ast$}]{sng\+Edge }\end{DoxyParamCaption})}



Removes pointed edge from the list. 

Removing single edge from head 
\begin{DoxyParams}{Parameters}
{\em main\+Head} & Begining of the list \\
\hline
{\em sng\+Edge} & Edge to remove \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{functions_8cpp_a1a32c4d3bd87256731e67936766c65ca}\label{functions_8cpp_a1a32c4d3bd87256731e67936766c65ca}} 
\index{functions.cpp@{functions.cpp}!trim@{trim}}
\index{trim@{trim}!functions.cpp@{functions.cpp}}
\doxysubsubsection{\texorpdfstring{trim()}{trim()}}
{\footnotesize\ttfamily std\+::string trim (\begin{DoxyParamCaption}\item[{const std\+::string \&}]{s }\end{DoxyParamCaption})}



Triming string line. 

Trimming string \begin{DoxyReturn}{Returns}
string without spaces 
\end{DoxyReturn}

\begin{DoxyParams}{Parameters}
{\em str} & String stream to trim \\
\hline
\end{DoxyParams}
